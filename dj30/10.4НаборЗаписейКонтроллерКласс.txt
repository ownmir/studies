╔═════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                                                                                                             ║
║   =list=                                                                                                    ║
║   MultipleObjectMixin      наследует от ContextMixin  извлекает из модели набор записей, возможно           ║
║   ───────────────────                                 отфильтрованный, отсортированный и разбитый           ║
║                            на части посредством пагинатора. Набор записей помещается в контекст шаблона     ║
║   Номер части пагин-ра передается в составе интернет-адреса через URL- или GET-параметр page. Number must   ║
║   int and begin from 1. Если это правило нарушено, то будет возвращено исключение Http404. Допустимо ука-   ║
║       зывать "last" - последняя часть                                                                       ║
║   - model                                                                                                   ║
║   - queryset либо диспетчер записей (Manager), либо исходный набор записей (QuerySet), из которого будут    ║
║    извлекаться записи. (См get_queryset)                                                                    ║
║   - ordering ест-но сортировка. Может быть указано в виде:                                                  ║
║    1) стороки с именем поля - для сортировки только по этому полю. По ум-ю - по возрастанию,                ║
║       -("минус")<поле> - по убыванию                                                                        ║
║    2) последовательности строк с именами полей - сортировка по нескольким полям                             ║
║    (См get_ordering)                                                                                        ║
║    Если не указано, станет выполняться сортировка, заданная в параметрах модели, или, если таковое не       ║
║    указано, записи сортироваться не будут.                                                                  ║
║   - paginate_by int number записей в одной части пагинатора. Если не указан или = None don't разбиваться    ║
║    на части (См get_paginate_by)                                                                            ║
║   - page_qwarg строковое имя URL- или GET-параметра, где передается номер выводимой части пагинатора        ║
║    по ум-ю "page"                                                                                           ║
║   - paginate_orphans - int мин число записей последней части пагин-ра. Если последняя часть пагин-ра        ║
║    содержит меньше записей, то оставшиеся записи будут выведены в предыдущей части. Если задать 0, то       ║
║    в последней части может присутствовать сколько угодно записей (поведение по ум-ю)                        ║
║    См get_paginate_orphans                                                                                  ║
║   - allow_empty Значение True разрешает извлечение "пустой" части пагин-ра (по ум-ю). False - при попытк    ║
║    извлечения "пустой" части пагин-ра возбуждает исключение Http404. см get_allow_empty                     ║
║   - paginator_class класс используемого пагин-ра (по ум-ю Paginator из модуля django.core.paginator)        ║
║    см get_paginator                                                                                         ║
║   - context_object_name задает имя переменной в которой будет сохранен извлеченный набор записей            ║
║    см get_context_object_name                                                                               ║
║                                                                                                             ║
║   -- get_queryset(self) должен возвращать исходный набор записей (QuerySet)                                 ║
║     По ум-ю return value queryset, если оно задано, или набор записей из модели, к-я задана в model         ║
║   -- get_ordering(self) возвращает параметры сортировки записей.                                            ║
║     По ум-ю возвращает значение атрибута ordering                                                           ║
║   -- get_paginate_by(self, queryset) должен возвращать число записей набора, полученного в параметре        ║
║     queryset, помещающихся в одной части пагинатора.                                                        ║
║         Изначально (по ум-ю) просто возвращает значение из paginate_by                                      ║
║   -- get_paginate_orphans(self) must return min число записей, помещающихся в последней части пагин-ра.     ║
║     Изначально (по ум-ю) возвращает значение из paginate_orphans                                            ║
║   -- get_allow_empty(self) must return True, если разрешено извлечение "пустой" части пагин-ра и False      ║
║   -- get_paginator() must create объект пагинатора и его возвращать. Формат объявления:                     ║
║     get_paginator(self, queryset, per_page, orphans=0, allow_empty_first_page)                              ║
║     queryset - хранит набор записей, per_page - число записей в части, orphans - мин число записей в        ║
║     последней части, allow_empty_first_page указывает разрешено извлечение пустой  части (True),            ║
║     или нет(False)                                                                                          ║
║     В начальной реализации создает экземпляр класса пагин-ра из атрибута paginator_class, передавая его     ║
║     конструктору все полученные им параметры.                                                               ║
║   -- paginate_queryset(self, queryset, page_size разбивает набор записей из queryset на части с указанны    ║
║     в параметре page_size числом записей в каждой части и возвращает кортеж из четырех элементов:           ║
║     • объекта самого пагин-ра;                                                                              ║
║     • объекта его текущей части, номер которой был получен с URL- или GET-параметром;                       ║
║     • набора записей, входящих в текущую часть (извлекается из атрибута object_list объекта текущей част    ║ 
║     пагин-ра                                                                                                ║
║     • True, если извлеченный набор записей действительно был разбит на части с применением пагин-ра и       ║
║     False в противном случае;                                                                               ║
║   -- get_context_object_name must return строку с именем переменной контекста шаблона, где будет сохране    ║
║     набор записей, полученный в параметре object_list                                                       ║
║     в начальной реализации возвращает имя из атрибута context_object_name или, если оно не указано,         ║
║     приведенное к нижнему регистру имя модели с добавленным суффиксом _list                                 ║
║   -- get_context_data(self, **kwargs) переопределенный метод, создающий и возвращающий контекст шаблона     ║
║     в начальной реализации извлекает набор записей из необезательного параметра object_list или, если этот  ║
║     параметр не указан, из атрибута object_list. После чего возвращает контекст с пятью переменными:        ║
║     • object_list выводимый на странице набор записей (если используется пагинатор, это будет н.з. текущей  ║
║      его части);                                                                                            ║
║     • переменная с именем, возвращенным методом get_context_object_name(), - то же самое.                   ║
║     • is_paginated - True, если применялся пагинатор или False;                                             ║
║     • paginator - объект пагинатора или None, если пагинатор не применялся;                                 ║
║     • page_obj - объект текущей страницы пагин-ра или None, если пагинатор не применялся                    ║
║                                                                                                             ║
║   MultipleObjectTemplateResponseMixin      наследующий от TemplateResponseMixin выполняет рендеринг шаблона ║
║   ───────────────────────────────────      на основе извлеченного из модели н.з.                            ║
║   Он требует, чтобы в контроллере-классе присутствовал атрибут object_list, в котором хранится н.з.         ║
║   - template_name_suffix строка с суффиксом по ум-ю '_list'                                                 ║
║   -- get_template_names(self) - переопределенный метод, возвращающий список путей к шаблонам в виде строк   ║
║     В начальной реализации воз-ет список из:                                                                ║
║         • template_name                                                                                     ║
║         • <<k>псевдоним приложения>\(/ в Linux)<имя модели><суффикс>.html</k> (bboard\bb_list)              ║
║                                                                                                             ║
╟─────────────────────────────────────────────────────────────────────────────────────────────────────────────╢
║   ListView: Все вместе извлекает из модели н.з., записывает его в атрибут object_list (чтобы успешно        ║
║   ────────             работали наследуемые им примеси) и выводит на экран страницу со списком записей.     ║
║   Далее код контроллера-класса BbByRubricView, унаследованного от ListView и выводящего страницу            ║
║   с объявлениями из выбранной посетителем рубрики.                                                          ║
║   from django.view.generic.list import ListView                                                             ║
║   from .models import Bb, Rubric                                                                            ║
║                                                                                                             ║
║   class BbByRubricView(ListView):                                                                           ║
║       template_name = 'bboard/bb_list.html'                                                                 ║
║       context_object_name = 'bbs'                                                                           ║
║                                                                                                             ║
║       def get_queryset(self):                                                                               ║
║           return Bb.objects.filter(rubric=self.kwargs['rubric_id']                                          ║
║                                                                                                             ║
║       def get_context_data(self, **kwargs):                                                                 ║
║           context = super().get_context_data(**kwargs)                                                      ║
║           context['rubrics'] = Rubric.objects.all()                                                         ║
║           context['current_rubric'] = Rubric.objects.get(pk=self.kwargs['rubric_id']                        ║
║           return context                                                                                    ║
║                                                                                                             ║
║   Код этого контроллера-класса > чем функции by_rubric() из-за шаблона bboard\bb_rubric.html                ║
║   1) требуется вывести список рубрик и текущую рубрику, следовательно, надо добавить эти данные в контекст  ║
║       шаблона, переопределив метод get_context_data().                                                      ║
║       2) мы импользуем уже имеющийся шаблон, поэтому надо указать в контроллере его имя и имя переменной    ║
║       контекста, в которой будет храниться список объявлений.                                               ║
║   Значение URL-параметра rubric_id мы получили обращением к словарю из атрибута kwargs, содержащему все     ║
║   URL-параметры, указанные в маршруте. Из контекста шаблона извлечь его мы не можем.                        ║
║                                                                                                             ║
╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════╝
